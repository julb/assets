plugins {
    id 'java-library-distribution'
    id 'io.freefair.lombok'
    id 'me.julb.gradleplugins.java11'
    id 'me.julb.gradleplugins.additionaljars'
    id 'org.springframework.boot'
}

dependencies {
    api platform(project(':bom'))

    implementation project(':spring-boot-starters:spring-boot-starter-web')
	
    testImplementation project(':spring-boot-starters:spring-boot-starter-test')
}

lombok {
    config['lombok.log.fieldName'] = 'LOGGER'
}

jar {
    manifest {
        attributes(
            'Main-Class': 'me.julb.Application'
        )
    }
}

test {
    useJUnitPlatform()
    jvmArgs = ["--add-opens", "java.base/java.lang=ALL-UNNAMED", "-Dlogging.level.root=OFF", "-Dlogging.level.org.springframework=OFF"]
}

springBoot {
    buildInfo()
}

bootBuildImage {
    // Image name.
    //imageName = "${docker.namespace}/${project.name}:${docker.tag}"
    
    // Environment.
    environment = [
        "BP_JVM_VERSION" : "11.*"
    ]
        /*
        BP_IMAGE_LABELS:
        me.julb.end-of-support
        me.julb.technology
        me.julb.category
        me.julb.embedded-features
        me.julb.description
        */
    
    // Docker creds.
    docker {
        builderRegistry {
            username = System.getProperty('docker.builderRegistry.username')
            password = System.getProperty('docker.builderRegistry.password')
            url = System.getProperty('docker.builderRegistry.url', 'docker.io')
        }
        
        publishRegistry {
            username = System.getProperty('docker.publishRegistry.username')
            password = System.getProperty('docker.publishRegistry.password')
            url = System.getProperty('docker.publishRegistry.url', 'docker.io')
        }
    }
}

bootJar {
    classifier = 'boot'
    mainClass = 'me.julb.Application'
    layered()
}